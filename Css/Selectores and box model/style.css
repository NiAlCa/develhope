/*Selectores de presencia y valor */

/* Estos selectores permiten seleccionar un elemento solo a partir de la presencia de un atributo (por ejemplo href) o a partir de varias coincidencias diferentes con respecto al valor del atributo.

selector [attr] ejemplo a[title] Relaciona elementos con un mismo nombre de atributo, attr (el valor que se indica entre corchetes).

selector [attr=value] ejemplo a[href="https://example.com"]	  Relaciona elementos con un mismo nombre de atributo, attr, cuyo valor es exactamente el mismo, value (la cadena de caracteres que se indica entre corchetes).

selector [attr~=value]	ejemplo p[class~="special"]	 Relaciona los elementos con un mismo nombre de atributo, attr, cuyo valor es exactamente value, o los elementos con un mismo atributo attr que contiene uno o más valores de los cuales, al menos uno, coincide con value.
Ten en cuenta que en una lista que incluya más de un valor, los distintos valores se separan con un espacio.

selectot [attr|=value]	 ejemplo div[lang|="zh"]	Relaciona los elementos con un mismo nombre de atributo, attr, cuyo valor puede ser exactamente value o puede comenzar con value seguido inmediatamente por un guion.

*/


/*Selectores coincidentes con subcadenas */
/* 
Estos selectores permiten un tipo más avanzado de relación entre las subcadenas de caracteres que constituyen el valor del atributo. Por ejemplo, si tienes las clases box-warning y box-error y quieres encontrar todos los elementos que empiezan con la cadena de caracteres “box-”, puedes seleccionarlas ambas con [class^="box-"].

Selector [attr^=value]	ejemplo li[class^="box-"]	  Relaciona elementos con un mismo nombre de atributo, attr, cuyo valor empieza exactamente con la subcadena de caracteres value.

selector [attr$=value]	ejemlpo li[class$="-box"]	Relaciona elementos con un mismo nombre de atributo, attr, cuyo valor termina exactamente con la subcadena de caracteres value.

selector [attr*= ]	 ejemplo li[class*="box"]	 Relaciona elementos con un mismo nombre de atributo, attr, cuyo valor incluye al menos una ocurrencia de la subcadena value en algún punto de la cadena.

*/

/*Pseudo clases 

 Una pseudoclase CSS es una palabra clave que se añade a los selectores y que especifica un estado especial del elemento seleccionado. 

 algunos de las pseudoclases que mas me han parecido interesantes

 La pseudo-clase (en-US) :active de CSS representa un elemento (como un botón) que el usuario está activando
La pseudo-clase :default de CSS representa cualquier elemento de formulario que sea el predeterminado entre un grupo de elementos relacionados.
La pseudo-clase :focus CSS representa un elemento (como una entrada de formulario) que ha recibido el foco. Quiere decir que se aplica cuando un elemento esta listo para ser usado 
La pseudo-clase :first de CSS, utilizada con la regla-at @page, representa la primera página de un documento impreso.
La pseudo-clase :first-of-type de CSS representa el primer elemento de su tipo entre un grupo de elementos hermanos.
La pseudo-clase :first-child de CSS representa el primer elemento entre un grupo de elementos hermanos.
La pseudo-clase :nth-child() de CSS coincide con uno o más elementos en función de su posición entre un grupo de hermanos.
La pseudo-clase :nth-last-child() de CSS selecciona uno o más elementos en función de su posición entre un grupo de hermanos, contando desde el final.
La pseudo-clase :nth-last-of-type() CSS coincide con uno o más elementos de un tipo dado, en función de su posición entre un grupo de hermanos, contando desde el final.
La pseudo-clase :nth-of-type() de CSS selecciona uno o más elementos de un tipo dado, en función de su posición entre un grupo de hermanos.
La pseudo-clase :hover de CSS coincide cuando el usuario interactúa con un elemento con un dispositivo señalador, pero no necesariamente lo activa.
La pseudo-clase (en-US) :only-child de CSS representa un elemento sin hermanos. Esto es lo mismo que :first-child:last-child o :nth-child(1):nth-last-child(1), pero con una especificidad menor.
La pseudo-clase :only-of-type CSS representa un elemento que no tiene hermanos del mismo tipo.
La pseudo-clase :visited de CSS representa enlaces que el usuario ya ha visitado. Por motivos de privacidad, los estilos que se pueden modificar con este selector son muy limitados.


   */


/* Pseudo elementos 

Un pseudoelemento CSS se utiliza para dar estilo a partes específicas de un elemento.

Por ejemplo, se puede utilizar para:

Aplicar estilo a la primera letra, o línea, de un elemento
Insertar contenido antes o después del contenido de un elemento

En CSS, ::after crea un pseudo-elemento que es el último hijo del elemento seleccionado
En CSS, ::before crea un pseudoelemento que es el primer hijo del elemento seleccionado
El pseudo-elemento ::first-letter aplica estilos a la primera letra de la primera línea un elemento de bloque, sólo cuando no es precedido de otro contenido (como imágenes o tablas).
El Pseudoelemento ::first-line aplica estilos a la primera línea de un elemento de bloque. 



*/

/*Combinadores*/


/* Selector de descendientes
El selector descendiente coincide con todos los elementos que son descendientes de un elemento.

En el ejemplo siguiente se seleccionan todos los elementos <p> dentro de los elementos <div>:*/
div p {
   background-color: yellow;
 }   


 /* 
 Selector de niños (>)
El selector secundario selecciona todos los elementos que son hijos de un elemento especificado.

En el ejemplo siguiente se seleccionan todos los elementos <p> que son Hijos de un <div> elemento:
 */
 div > p {
   background-color: yellow;
 }

 /* 
 Selector de hermanos adyacentes (+)
El selector del mismo nivel adyacente se utiliza para seleccionar un elemento que es directamente después de otro elemento específico.

Los elementos hermanos deben tener el mismo elemento padre, y "adyacente" significa "inmediatamente después".

En el ejemplo siguiente se selecciona el primer elemento <p> que se coloca inmediatamente después de los elementos <div>:
 */
 div + p {
   background-color: yellow;
 }

 /* 
 Selector general de hermanos (~)
El selector general de elementos del mismo nivel selecciona todos los elementos que son los siguientes elementos del mismo nivel de un elemento especificado.

En el ejemplo siguiente se seleccionan todos los elementos <p> que son los siguientes elementos del mismo nivel de los elementos <div>:
 */
 div ~ p {
   background-color: yellow;
 }


/*
 height especifica la altura de un elemento
 width  establece el ancho de un elemento

/*
 padding El padding en CSS es una propiedad o relleno que se crea alrededor del contenido de un elemento dentro de los bordes definidos
 margin se utilizan para crear espacio alrededor de los elementos, fuera de cualquier borde definido
 border añadira tamaño a nuestro elemento */




 




/* 
Aqui veremos a que se refiere cada parametro segun el numero de parametros que pongamos 

relleno: 25px 50px 75px 100px;
El relleno superior es de 25px
El relleno derecho es de 50px
El relleno inferior es de 75px
El relleno izquierdo es de 100px

relleno: 25px 50px 75px;
El relleno superior es de 25px
Los rellenos derecho e izquierdo son de 50px
El relleno inferior es de 75px

relleno: 25px 50px;
Los rellenos superior e inferior son de 25px
Los rellenos derecho e izquierdo son de 50px

relleno: 25px;
Los cuatro rellenos son de 25px

*/



/*Si quisieramos solo editar un borde lo hariamos de la siguiente manera 
usaremos el margin como ejemplo, se aplica al resto.

margin-bottom	
margin-left	
margin-right	
margin-top

*/

/* 
En CSS, en general, hay dos tipos de cajas: cajas en bloque y cajas en línea. Estas características se refieren al modo como se comporta la caja en términos de flujo de página y en relación con otras cajas de la página:

Si una caja se define como un bloque, se comportará de las maneras siguientes:
La caja fuerza un salto de línea al llegar al final de la línea.
La caja se extenderá en la dirección de la línea para llenar todo el espacio disponible que haya en su contenedor. En la mayoría de los casos, esto significa que la caja será tan ancha como su contenedor, y llenará el 100% del espacio disponible.
Se respetan las propiedades width y height.
El relleno, el margen y el borde mantienen a los otros elementos alejados de la caja.
A menos que decidamos cambiar el tipo de visualización a en línea, elementos como los encabezados (por ejemplo, <h1>) y todos los elementos <p> usan por defecto block como tipo de visualización externa.



Si una caja tiene una visualización externa de tipo inline, entonces:
La caja no fuerza ningún salto de línea al llegar al final de la línea.
Las propiedades width y height no se aplican.
Se aplican relleno, margen y bordes verticales, pero no mantienen alejadas otras cajas en línea.
Se aplican relleno, margen y bordes horizontales, y mantienen alejadas otras cajas en línea.

El elemento <a>, que se utiliza para los enlaces, y los elementos <span>, <em> y <strong> son ejemplos de elementos que se muestran en línea por defecto.

El tipo de caja que se aplica a un elemento está definido por los valores de propiedad display, como block y inline, y se relaciona con el valor externo (outer) de visualización (display).

*/

.card{
  display: block;
  display: inline;
}


/*
Si en un elemento establecemos display: flex;, el tipo de visualización externa es de tipo bloque (block), pero el tipo de visualización interna cambia a flexible (flex). Cualquier elemento que sea hijo directo de esta caja pasará a comportarse como un elemento de tipo flex,

*/

/*overflow sirve para esconder lo que sobre sale de los elementos 
*/

.box{
  overflow: hidden; /*De esta manera estariamos oculatando el contenido sobrante */
}

.box{
  overflow: scroll; /*De esta manera estariamos dando un scroll al espacio sobrante */
}

.box{
  overflow: auto; /*De esta manera dejamos decidir a css cuando poner la barra o no  */
}